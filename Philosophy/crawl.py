import requests
from bs4 import BeautifulSoup
import re
import time

# remove text with parenthesis from paragraph
def remove_links_parenthesis(tag):
    str_tag = str(tag)
    links_in_parenthesis = re.findall('\((.*?)\)',str_tag)
    for text_with_link in links_in_parenthesis:
        str_tag = str_tag.replace('('+text_with_link+')','')
    tag = BeautifulSoup(str_tag, 'html.parser')
    return tag


def get_first_link(url):
    # request url generated by eithrt first link in the last page or submitted randomly
    headers = {'User-Agent': 'FooBar-Spider 1.0'}
    time.sleep(5)
    article_main = requests.post(url, headers=headers)

    article_main_text = article_main.text
    soup = BeautifulSoup(article_main_text.encode('utf-8','ignore'), 'html.parser')
    body = soup.find('div', {'class':'mw-parser-output'})
    # find all tags with potential links in the main body, noted as paragraph
    paras = []
    for tag in body.findAll(True, recursive=False):
        if tag.name == 'p' or tag.name == 'ul' or tag.name =='ol':
            #print(tag.name)

            paras.append(tag)

    # deal with each paragraph where we only focus on link <a> without any class and containing 'wiki'
    links_dict = {}
    for para in paras:
        para = remove_links_parenthesis(para)
        links = para.findAll('a')

        if links:
            #print(links)
            for link in links:
                if link.has_attr('href') and not link.has_attr('class') and 'wiki' in link['href']:
                    links_dict[link.text.lower()]=link['href']

    # only first link and keyowrd remain
    url_keyword, link = list(links_dict.items())[0]

    return url_keyword, link

def main():

    URL = 'https://en.wikipedia.org/wiki/Special:Random'

    keywords = []
    while True:
        
        url_keyword, link = get_first_link(URL)
        print(url_keyword)
        
        if url_keyword.lower() == 'philosophy':
            print('Philosophy is reached!')
            break
        
        # when the keyword shows up twice in the list of keywords saved
        elif url_keyword.lower() in keywords:
            print('stuck in a loop!')
            break
        elif url_keyword is None:
            print('There is no outgoing link.')
            break
        keywords.append(url_keyword.lower())
        URL = 'https://en.wikipedia.org'+link

if __name__ == "__main__":
    main()